{"version":3,"sources":["components/contents/statistics/Statistic.module.css","components/navigation/navigationItems/NavigationItem.js","components/navigation/Navigation.js","components/logo/Logo.js","components/header/Header.js","components/contents/statistics/Statistic.js","App.js","reportWebVitals.js","index.js","components/header/Header.module.css","components/navigation/navigationItems/NavigationItem.module.css","components/navigation/Navigation.module.css","components/logo/Logo.module.css"],"names":["module","exports","NavigationItem","props","className","styles","navigationItem","to","link","children","Navigation","navigation","Component","Logo","logo","Header","header","Statistic","state","confirmedData","labels","datasets","label","backgroundColor","fill","data","quarantinedData","comparedData","boarderColor","dailyData","getData","a","axios","get","res","makeData","console","log","getDailyData","dayOne","makeDataForDay","items","currentConfirmed","dailyConfirmed","slice","length","reverse","reduce","acc","cur","confirmed","Confirmed","push","temp","splice","date","Date","month","getMonth","day","getDate","dayLabels","i","setState","newArr","currentDate","year","getFullYear","active","Active","death","Deaths","recovered","Recovered","findItem","find","filter","last","map","borderColor","Statistics","Bar","this","options","legend","display","position","Line","Doughnut","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37812cc2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Statistics\":\"Statistic_Statistics__1fH2_\",\"Bar\":\"Statistic_Bar__3y5Te\",\"Line\":\"Statistic_Line__qEAyF\",\"Doughnut\":\"Statistic_Doughnut__IrSVE\",\"head\":\"Statistic_head___AMfj\"};","import React from 'react';\r\nimport styles from './NavigationItem.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst NavigationItem = (props) => {\r\n  return (\r\n    <li className={styles.navigationItem}>\r\n      <NavLink to={props.link}>\r\n        <button>{props.children}</button>\r\n      </NavLink>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NavigationItem;\r\n","import React, { Component } from 'react';\r\nimport NavigationItem from './navigationItems/NavigationItem';\r\nimport styles from './Navigation.module.css';\r\n\r\nclass Navigation extends Component {\r\n  render() {\r\n    return (\r\n      <ul className={styles.navigation}>\r\n        <NavigationItem link='/'>STATISTICS</NavigationItem>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport styles from './Logo.module.css';\r\n\r\nconst Logo = () => {\r\n  return <span className={styles.logo}>☠ COVID-19</span>;\r\n};\r\n\r\nexport default Logo;\r\n","import React, { Component } from 'react';\r\nimport styles from './Header.module.css';\r\n\r\nimport Navigation from '../navigation/Navigation';\r\nimport Logo from '../logo/Logo';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className={styles.header}>\r\n        <Logo />\r\n        <Navigation />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport { Bar, Doughnut, Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport styles from './Statistic.module.css';\r\n\r\nclass Statistic extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      confirmedData: {\r\n        labels: ['1월', '2월', '3월'],\r\n        datasets: [\r\n          {\r\n            label: '국내 누적 확진자',\r\n            backgroundColor: 'salmon',\r\n            fill: true,\r\n            data: [0, 0, 0],\r\n          },\r\n        ],\r\n      },\r\n      quarantinedData: {\r\n        labels: ['1월', '2월', '3월'],\r\n        datasets: [\r\n          {\r\n            label: '월별 격리자 현황',\r\n            backgroundColor: 'salmon',\r\n            fill: true,\r\n            data: [0, 0, 0],\r\n          },\r\n        ],\r\n      },\r\n      comparedData: {\r\n        labels: ['확진자', '격리해제', '사망자'],\r\n        datasets: [\r\n          {\r\n            label: '확진,해제,사망 비율',\r\n            backgroundColor: ['#f9de59', '#e8a628', '#719a0a'],\r\n            boarderColor: ['#f9de59', '#e8a628', '#719a0a'],\r\n            fill: false,\r\n            data: [0, 0, 0],\r\n          },\r\n        ],\r\n      },\r\n      dailyData: {\r\n        labels: ['1월', '2월', '3월'],\r\n        datasets: [\r\n          {\r\n            label: '일별 확진자',\r\n            backgroundColor: '#e8a628',\r\n            fill: true,\r\n            data: [0, 0, 0],\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // API 요청\r\n    const getData = async () => {\r\n      try {\r\n        const res = await axios.get(\r\n          'https://api.covid19api.com/total/dayone/country/kr'\r\n        );\r\n        makeData(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    const getDailyData = async () => {\r\n      // API 요청\r\n      try {\r\n        const dayOne = await axios.get(\r\n          'https://api.covid19api.com/total/dayone/country/kr'\r\n        );\r\n        makeDataForDay(dayOne.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    // 일자별 데이터 이용\r\n    const makeDataForDay = (items) => {\r\n      const currentConfirmed = [];\r\n      const arr = items.slice(items.length - 11);\r\n      // 현재 날짜를 제일 앞에 놓도록 순서 변경\r\n      const reverse = arr.reverse();\r\n      const dailyConfirmed = reverse.reduce((acc, cur) => {\r\n        // 확진자 데이터\r\n        const confirmed = cur.Confirmed;\r\n\r\n        // 빈배열이면 현재 누적 확진자수를 넣는다\r\n        if (currentConfirmed.length === 0) {\r\n          currentConfirmed.push(confirmed);\r\n        } else if (currentConfirmed.length > 0) {\r\n          // 빈 배열이 아니라면 계산\r\n          // 특정날짜의 누적 확진자 - 이전날짜의 누적 확진자 = 이전 날짜의 확진자 수\r\n          const temp = currentConfirmed[0] - confirmed;\r\n          // 이전 날짜 확진자수를 저장\r\n          acc.push(temp);\r\n          // 현재 누적 확진자수를 이전 날짜 누적 확진자수로 교체\r\n          currentConfirmed.splice(0, 1, confirmed);\r\n        }\r\n        return acc;\r\n      }, []);\r\n      // 전체 데이터 순서 변경\r\n      dailyConfirmed.reverse();\r\n\r\n      // 현재 날짜 월 / 일 계산\r\n      const date = new Date();\r\n      const month = date.getMonth() + 1;\r\n      const day = date.getDate();\r\n\r\n      // 현재날짜부터 10일 전까지 계산\r\n      const dayLabels = [];\r\n      for (let i = 10; i > 0; i--) {\r\n        dayLabels.push(`${month}월 ${day - i}일`);\r\n      }\r\n\r\n      this.setState({\r\n        dailyData: {\r\n          labels: dayLabels,\r\n          datasets: [\r\n            {\r\n              label: '일별 확진자',\r\n              backgroundColor: '#e8a628',\r\n              fill: true,\r\n              data: dailyConfirmed,\r\n            },\r\n          ],\r\n        },\r\n      });\r\n    };\r\n\r\n    // 누적 데이터 이용\r\n    const makeData = (items) => {\r\n      const arr = items.reduce((acc, cur) => {\r\n        // 날짜 구하기\r\n        const currentDate = new Date(cur.Date);\r\n        const year = currentDate.getFullYear();\r\n        const month = currentDate.getMonth();\r\n        const date = currentDate.getDate();\r\n\r\n        // 확진자 데이터\r\n        const confirmed = cur.Confirmed;\r\n        const active = cur.Active;\r\n        const death = cur.Deaths;\r\n        const recovered = cur.Recovered;\r\n\r\n        // 각 월별 마지막날 데이터 수집\r\n        const findItem = acc.find(\r\n          (temp) => temp.year === year && temp.month === month\r\n        );\r\n        if (!findItem) {\r\n          acc.push({\r\n            year,\r\n            month,\r\n            date,\r\n            confirmed,\r\n            active,\r\n            death,\r\n            recovered,\r\n          });\r\n        }\r\n        if (findItem && findItem.date < date) {\r\n          findItem.active = active;\r\n          findItem.death = death;\r\n          findItem.recovered = recovered;\r\n          findItem.confirmed = confirmed;\r\n          findItem.year = year;\r\n          findItem.month = month;\r\n          findItem.day = date;\r\n        }\r\n        return acc;\r\n      }, []);\r\n\r\n      // 2021년 데이터만 추출\r\n      const newArr = arr.filter((a) => {\r\n        return a.year === new Date().getFullYear();\r\n      });\r\n\r\n      // 마지막달 데이터 추출\r\n      const last = newArr[newArr.length - 1];\r\n\r\n      this.setState({\r\n        confirmedData: {\r\n          datasets: [\r\n            {\r\n              label: '국내 누적 확진자',\r\n              backgroundColor: 'salmon',\r\n              fill: true,\r\n              data: newArr.map((a) => a.confirmed),\r\n            },\r\n          ],\r\n        },\r\n        quarantinedData: {\r\n          datasets: [\r\n            {\r\n              label: '월별 격리자 현황',\r\n              borderColor: 'salmon',\r\n              fill: false,\r\n              data: newArr.map((a) => a.active),\r\n            },\r\n          ],\r\n        },\r\n        comparedData: {\r\n          datasets: [\r\n            {\r\n              label: '확진,해제,사망 비율',\r\n              backgroundColor: ['#f9de59', '#e8a628', '#719a0a'],\r\n              boarderColor: ['#f9de59', '#e8a628', '#719a0a'],\r\n              fill: false,\r\n              data: [last.confirmed, last.recovered, last.death],\r\n            },\r\n          ],\r\n        },\r\n      });\r\n    };\r\n\r\n    getData();\r\n    getDailyData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section>\r\n        <div className={styles.Statistics}>\r\n          <div className={styles.Bar}>\r\n            <Bar\r\n              data={this.state.confirmedData}\r\n              options={\r\n                ({\r\n                  title: {\r\n                    display: true,\r\n                    text: '국내 확진자 추이',\r\n                    fontSize: 20,\r\n                  },\r\n                },\r\n                {\r\n                  legend: { display: true, position: 'bottom' },\r\n                })\r\n              }\r\n            ></Bar>\r\n          </div>\r\n          <div className={styles.Line}>\r\n            <Line\r\n              data={this.state.quarantinedData}\r\n              options={\r\n                ({\r\n                  title: {\r\n                    display: true,\r\n                    text: '월별 격리자 현황',\r\n                    fontSize: 20,\r\n                  },\r\n                },\r\n                {\r\n                  legend: { display: true, position: 'bottom' },\r\n                })\r\n              }\r\n            ></Line>\r\n          </div>\r\n          <div className={styles.Doughnut}>\r\n            <Doughnut\r\n              data={this.state.comparedData}\r\n              options={\r\n                ({\r\n                  title: {\r\n                    display: true,\r\n                    text: `확진자, 격리해제, 사망자 비율 (${\r\n                      new Date().getMonth() + 1\r\n                    }월)`,\r\n                    fontSize: 20,\r\n                  },\r\n                },\r\n                {\r\n                  legend: { display: true, position: 'bottom' },\r\n                })\r\n              }\r\n            ></Doughnut>\r\n          </div>\r\n          <div className={styles.Bar}>\r\n            <Bar\r\n              data={this.state.dailyData}\r\n              options={\r\n                ({\r\n                  title: {\r\n                    display: true,\r\n                    text: '일자별 확진자 추이',\r\n                    fontSize: 20,\r\n                  },\r\n                },\r\n                {\r\n                  legend: { display: true, position: 'bottom' },\r\n                })\r\n              }\r\n            ></Bar>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Statistic;\r\n","import './App.css';\nimport { Fragment } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Header from './components/header/Header';\nimport Statistic from './components/contents/statistics/Statistic';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Header />\n      <Switch>\n        <Route path='/' exact component={Statistic} />\n      </Switch>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3x7xN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigationItem\":\"NavigationItem_navigationItem__Kb5_6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"Navigation_navigation__35mwd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__YUu_B\"};"],"sourceRoot":""}